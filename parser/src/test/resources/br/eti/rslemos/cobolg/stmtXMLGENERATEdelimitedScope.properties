# BEGIN COPYRIGHT NOTICE
# 
# This file is part of program "cobolg"
# Copyright 2016  Rodrigo Lemos
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# END COPYRIGHT NOTICE

XML_GENERATE_XML_1_FROM_SOURCE_0_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 COUNT IN C END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) COUNT IN (identifier C)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_1200_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ENCODING 1200 END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_1200_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ENCODING (literal (numericLiteral 1200))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH XML-DECLARATION END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH XML-DECLARATION) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ATTRIBUTES END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ATTRIBUTES) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS NS-NAME END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (identifier NS-NAME)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X'))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS NS-NAME NAMESPACE-PREFIX IS NS-PREFIX END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (identifier NS-NAME) NAMESPACE-PREFIX IS (identifier NS-PREFIX)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS NS-NAME NAMESPACE-PREFIX IS 'PREFIX' END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (identifier NS-NAME) NAMESPACE-PREFIX IS (literal (alphanumericLiteral 'PREFIX'))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_NS_PREFIX_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' NAMESPACE-PREFIX IS NS-PREFIX END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_NS_PREFIX_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X')) NAMESPACE-PREFIX IS (identifier NS-PREFIX)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' NAMESPACE-PREFIX IS 'PREFIX'  END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X')) NAMESPACE-PREFIX IS (literal (alphanumericLiteral 'PREFIX'))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAME OF ID-1 IS 'ID1' END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1'))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAME OF ID-1 IS 'ID1' ID-2 IS 'ID-2' END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1')) (identifier ID-2) IS (literal (alphanumericLiteral 'ID-2'))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ATTRIBUTE END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ATTRIBUTE) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ELEMENT END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ELEMENT) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS CONTENT END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS CONTENT) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_VAL_2_IS_CONTENT_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ATTRIBUTE VAL-2 IS CONTENT END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_VAL_2_IS_CONTENT_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ATTRIBUTE (identifier VAL-2) IS CONTENT) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_ATTRIBUTE_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ELEMENT VAL-2 IS ATTRIBUTE END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_ATTRIBUTE_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ELEMENT (identifier VAL-2) IS ATTRIBUTE) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ELEMENT_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS CONTENT VAL-2 IS ELEMENT END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ELEMENT_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS CONTENT (identifier VAL-2) IS ELEMENT) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_ZEROS_OR_SPACES_OR_LOW_VALUES_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 WHEN ZEROS OR SPACES OR LOW-VALUES END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_ZEROS_OR_SPACES_OR_LOW_VALUES_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1) (xmlGenerateWhenPhrase WHEN ZEROS OR SPACES OR LOW-VALUES)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_NUMERIC_ATTRIBUTE_WHEN_ZEROS_OR_LOW_VALUES_OR_HIGH_VALUES_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS EVERY NUMERIC ATTRIBUTE WHEN ZEROS OR LOW-VALUES OR HIGH-VALUES END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_NUMERIC_ATTRIBUTE_WHEN_ZEROS_OR_LOW_VALUES_OR_HIGH_VALUES_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (genericSupressionPhrase EVERY NUMERIC ATTRIBUTE (xmlGenerateWhenPhrase WHEN ZEROS OR LOW-VALUES OR HIGH-VALUES))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_X_2_WHEN_ZERO_SPACE_LOW_VALUE_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 X-2 WHEN ZERO SPACE LOW-VALUE END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_X_2_WHEN_ZERO_SPACE_LOW_VALUE_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1) (identifier X-2) (xmlGenerateWhenPhrase WHEN ZERO SPACE LOW-VALUE)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_HIGH_VALUES_EVERY_NONNUMERIC_WHEN_SPACES_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 WHEN HIGH-VALUES EVERY NONNUMERIC WHEN SPACES END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_HIGH_VALUES_EVERY_NONNUMERIC_WHEN_SPACES_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1) (xmlGenerateWhenPhrase WHEN HIGH-VALUES) (genericSupressionPhrase EVERY NONNUMERIC (xmlGenerateWhenPhrase WHEN SPACES))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_CONTENT_WHEN_ZERO_SPACE_X_2_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS EVERY CONTENT WHEN ZERO SPACE X-2 END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_CONTENT_WHEN_ZERO_SPACE_X_2_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (genericSupressionPhrase EVERY CONTENT (xmlGenerateWhenPhrase WHEN ZERO SPACE)) (identifier X-2)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_WITH_ENCODING_1208_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 COUNT IN C WITH ENCODING 1208 END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_WITH_ENCODING_1208_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) COUNT IN (identifier C) WITH ENCODING (literal (numericLiteral 1208))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_CDPG_WITH_XML_DECLARATION_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ENCODING CDPG WITH XML-DECLARATION END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_CDPG_WITH_XML_DECLARATION_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ENCODING (identifier CDPG) WITH XML-DECLARATION) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_WITH_ATTRIBUTES_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH XML-DECLARATION WITH ATTRIBUTES END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_WITH_ATTRIBUTES_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH XML-DECLARATION WITH ATTRIBUTES) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ATTRIBUTES NAMESPACE IS NS-NAME NAMESPACE-PREFIX IS NS-PREFIX END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ATTRIBUTES NAMESPACE IS (identifier NS-NAME) NAMESPACE-PREFIX IS (identifier NS-PREFIX)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_NAME_OF_ID_1_IS_QUOTED_ID1_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' NAMESPACE-PREFIX IS 'PREFIX' NAME OF ID-1 IS 'ID1' END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_NAME_OF_ID_1_IS_QUOTED_ID1_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X')) NAMESPACE-PREFIX IS (literal (alphanumericLiteral 'PREFIX')) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1'))) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_CONTENT_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAME OF ID-1 IS 'ID1' ID-2 IS 'ID-2' TYPE OF VAL-1 IS ELEMENT VAL-2 IS CONTENT END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_CONTENT_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1')) (identifier ID-2) IS (literal (alphanumericLiteral 'ID-2')) TYPE OF (identifier VAL-1) IS ELEMENT (identifier VAL-2) IS CONTENT) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ATTRIBUTE_SUPPRESS_WHEN_HIGH_VALUE_X_2_WHEN_LOW_VALUE_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS CONTENT VAL-2 IS ATTRIBUTE SUPPRESS WHEN HIGH-VALUE X-2 WHEN LOW-VALUE END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ATTRIBUTE_SUPPRESS_WHEN_HIGH_VALUE_X_2_WHEN_LOW_VALUE_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS CONTENT (identifier VAL-2) IS ATTRIBUTE SUPPRESS (genericSupressionPhrase (xmlGenerateWhenPhrase WHEN HIGH-VALUE)) (identifier X-2) (xmlGenerateWhenPhrase WHEN LOW-VALUE)) exceptionPhrases) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_C_ENCODING_CDPG_XML_DECLARATION_ATTRIBUTES_NAMESPACE_NS_NAME_NAMESPACE_PREFIX_QUOTED_PREFIX_NAME_ID_1_QUOTED_ID1_ID_2_QUOTED_ID_2_TYPE_VAL_1_ATTRIBUTE_VAL_2_ELEMENT_SUPPRESS_X_1_WHEN_ZEROES_X_2_WHEN_HIGH_VALUE_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 COUNT C ENCODING CDPG XML-DECLARATION ATTRIBUTES NAMESPACE NS-NAME NAMESPACE-PREFIX 'PREFIX' NAME ID-1 'ID1' ID-2 'ID-2' TYPE VAL-1 ATTRIBUTE VAL-2 ELEMENT SUPPRESS X-1 WHEN ZEROES X-2 WHEN HIGH-VALUE END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_C_ENCODING_CDPG_XML_DECLARATION_ATTRIBUTES_NAMESPACE_NS_NAME_NAMESPACE_PREFIX_QUOTED_PREFIX_NAME_ID_1_QUOTED_ID1_ID_2_QUOTED_ID_2_TYPE_VAL_1_ATTRIBUTE_VAL_2_ELEMENT_SUPPRESS_X_1_WHEN_ZEROES_X_2_WHEN_HIGH_VALUE_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) COUNT (identifier C) ENCODING (identifier CDPG) XML-DECLARATION ATTRIBUTES NAMESPACE (identifier NS-NAME) NAMESPACE-PREFIX (literal (alphanumericLiteral 'PREFIX')) NAME (identifier ID-1) (literal (alphanumericLiteral 'ID1')) (identifier ID-2) (literal (alphanumericLiteral 'ID-2')) TYPE (identifier VAL-1) ATTRIBUTE (identifier VAL-2) ELEMENT SUPPRESS (identifier X-1) (xmlGenerateWhenPhrase WHEN ZEROES) (identifier X-2) (xmlGenerateWhenPhrase WHEN HIGH-VALUE)) exceptionPhrases) END-XML)


XML_GENERATE_XML_1_FROM_SOURCE_0_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 COUNT IN C ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) COUNT IN (identifier C)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_1200_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ENCODING 1200 ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_1200_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ENCODING (literal (numericLiteral 1200))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH XML-DECLARATION ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH XML-DECLARATION) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ATTRIBUTES ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ATTRIBUTES) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS NS-NAME ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (identifier NS-NAME)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X'))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS NS-NAME NAMESPACE-PREFIX IS NS-PREFIX ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (identifier NS-NAME) NAMESPACE-PREFIX IS (identifier NS-PREFIX)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS NS-NAME NAMESPACE-PREFIX IS 'PREFIX' ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (identifier NS-NAME) NAMESPACE-PREFIX IS (literal (alphanumericLiteral 'PREFIX'))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_NS_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' NAMESPACE-PREFIX IS NS-PREFIX ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_NS_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X')) NAMESPACE-PREFIX IS (identifier NS-PREFIX)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' NAMESPACE-PREFIX IS 'PREFIX'  ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X')) NAMESPACE-PREFIX IS (literal (alphanumericLiteral 'PREFIX'))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAME OF ID-1 IS 'ID1' ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1'))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAME OF ID-1 IS 'ID1' ID-2 IS 'ID-2' ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1')) (identifier ID-2) IS (literal (alphanumericLiteral 'ID-2'))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ATTRIBUTE ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ATTRIBUTE) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ELEMENT ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ELEMENT) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS CONTENT ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS CONTENT) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_VAL_2_IS_CONTENT_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ATTRIBUTE VAL-2 IS CONTENT ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ATTRIBUTE_VAL_2_IS_CONTENT_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ATTRIBUTE (identifier VAL-2) IS CONTENT) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_ATTRIBUTE_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS ELEMENT VAL-2 IS ATTRIBUTE ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_ATTRIBUTE_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS ELEMENT (identifier VAL-2) IS ATTRIBUTE) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ELEMENT_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS CONTENT VAL-2 IS ELEMENT ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ELEMENT_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS CONTENT (identifier VAL-2) IS ELEMENT) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_ZEROS_OR_SPACES_OR_LOW_VALUES_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 WHEN ZEROS OR SPACES OR LOW-VALUES ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_ZEROS_OR_SPACES_OR_LOW_VALUES_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1) (xmlGenerateWhenPhrase WHEN ZEROS OR SPACES OR LOW-VALUES)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_NUMERIC_ATTRIBUTE_WHEN_ZEROS_OR_LOW_VALUES_OR_HIGH_VALUES_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS EVERY NUMERIC ATTRIBUTE WHEN ZEROS OR LOW-VALUES OR HIGH-VALUES ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_NUMERIC_ATTRIBUTE_WHEN_ZEROS_OR_LOW_VALUES_OR_HIGH_VALUES_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (genericSupressionPhrase EVERY NUMERIC ATTRIBUTE (xmlGenerateWhenPhrase WHEN ZEROS OR LOW-VALUES OR HIGH-VALUES))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_X_2_WHEN_ZERO_SPACE_LOW_VALUE_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 X-2 WHEN ZERO SPACE LOW-VALUE ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_X_2_WHEN_ZERO_SPACE_LOW_VALUE_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1) (identifier X-2) (xmlGenerateWhenPhrase WHEN ZERO SPACE LOW-VALUE)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_HIGH_VALUES_EVERY_NONNUMERIC_WHEN_SPACES_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS X-1 WHEN HIGH-VALUES EVERY NONNUMERIC WHEN SPACES ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_X_1_WHEN_HIGH_VALUES_EVERY_NONNUMERIC_WHEN_SPACES_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (identifier X-1) (xmlGenerateWhenPhrase WHEN HIGH-VALUES) (genericSupressionPhrase EVERY NONNUMERIC (xmlGenerateWhenPhrase WHEN SPACES))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_CONTENT_WHEN_ZERO_SPACE_X_2_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 SUPPRESS EVERY CONTENT WHEN ZERO SPACE X-2 ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_SUPPRESS_EVERY_CONTENT_WHEN_ZERO_SPACE_X_2_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) SUPPRESS (genericSupressionPhrase EVERY CONTENT (xmlGenerateWhenPhrase WHEN ZERO SPACE)) (identifier X-2)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_WITH_ENCODING_1208_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 COUNT IN C WITH ENCODING 1208 ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_IN_C_WITH_ENCODING_1208_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) COUNT IN (identifier C) WITH ENCODING (literal (numericLiteral 1208))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_CDPG_WITH_XML_DECLARATION_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ENCODING CDPG WITH XML-DECLARATION ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ENCODING_CDPG_WITH_XML_DECLARATION_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ENCODING (identifier CDPG) WITH XML-DECLARATION) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_WITH_ATTRIBUTES_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH XML-DECLARATION WITH ATTRIBUTES ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_XML_DECLARATION_WITH_ATTRIBUTES_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH XML-DECLARATION WITH ATTRIBUTES) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 WITH ATTRIBUTES NAMESPACE IS NS-NAME NAMESPACE-PREFIX IS NS-PREFIX ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_WITH_ATTRIBUTES_NAMESPACE_IS_NS_NAME_NAMESPACE_PREFIX_IS_NS_PREFIX_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) WITH ATTRIBUTES NAMESPACE IS (identifier NS-NAME) NAMESPACE-PREFIX IS (identifier NS-PREFIX)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_NAME_OF_ID_1_IS_QUOTED_ID1_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAMESPACE IS 'HTTP://X' NAMESPACE-PREFIX IS 'PREFIX' NAME OF ID-1 IS 'ID1' ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAMESPACE_IS_URL_NAMESPACE_PREFIX_IS_QUOTED_PREFIX_NAME_OF_ID_1_IS_QUOTED_ID1_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAMESPACE IS (literal (alphanumericLiteral 'HTTP://X')) NAMESPACE-PREFIX IS (literal (alphanumericLiteral 'PREFIX')) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1'))) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_CONTENT_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 NAME OF ID-1 IS 'ID1' ID-2 IS 'ID-2' TYPE OF VAL-1 IS ELEMENT VAL-2 IS CONTENT ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_NAME_OF_ID_1_IS_QUOTED_ID1_ID_2_IS_QUOTED_ID_2_TYPE_OF_VAL_1_IS_ELEMENT_VAL_2_IS_CONTENT_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) NAME OF (identifier ID-1) IS (literal (alphanumericLiteral 'ID1')) (identifier ID-2) IS (literal (alphanumericLiteral 'ID-2')) TYPE OF (identifier VAL-1) IS ELEMENT (identifier VAL-2) IS CONTENT) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ATTRIBUTE_SUPPRESS_WHEN_HIGH_VALUE_X_2_WHEN_LOW_VALUE_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 TYPE OF VAL-1 IS CONTENT VAL-2 IS ATTRIBUTE SUPPRESS WHEN HIGH-VALUE X-2 WHEN LOW-VALUE ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_TYPE_OF_VAL_1_IS_CONTENT_VAL_2_IS_ATTRIBUTE_SUPPRESS_WHEN_HIGH_VALUE_X_2_WHEN_LOW_VALUE_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) TYPE OF (identifier VAL-1) IS CONTENT (identifier VAL-2) IS ATTRIBUTE SUPPRESS (genericSupressionPhrase (xmlGenerateWhenPhrase WHEN HIGH-VALUE)) (identifier X-2) (xmlGenerateWhenPhrase WHEN LOW-VALUE)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)

XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_C_ENCODING_CDPG_XML_DECLARATION_ATTRIBUTES_NAMESPACE_NS_NAME_NAMESPACE_PREFIX_QUOTED_PREFIX_NAME_ID_1_QUOTED_ID1_ID_2_QUOTED_ID_2_TYPE_VAL_1_ATTRIBUTE_VAL_2_ELEMENT_SUPPRESS_X_1_WHEN_ZEROES_X_2_WHEN_HIGH_VALUE_ON_EXCEPTION_STOP_RUN_END_XML.source=XML GENERATE XML-1 FROM SOURCE-0 COUNT C ENCODING CDPG XML-DECLARATION ATTRIBUTES NAMESPACE NS-NAME NAMESPACE-PREFIX 'PREFIX' NAME ID-1 'ID1' ID-2 'ID-2' TYPE VAL-1 ATTRIBUTE VAL-2 ELEMENT SUPPRESS X-1 WHEN ZEROES X-2 WHEN HIGH-VALUE ON EXCEPTION STOP RUN END-XML
XML_GENERATE_XML_1_FROM_SOURCE_0_COUNT_C_ENCODING_CDPG_XML_DECLARATION_ATTRIBUTES_NAMESPACE_NS_NAME_NAMESPACE_PREFIX_QUOTED_PREFIX_NAME_ID_1_QUOTED_ID1_ID_2_QUOTED_ID_2_TYPE_VAL_1_ATTRIBUTE_VAL_2_ELEMENT_SUPPRESS_X_1_WHEN_ZEROES_X_2_WHEN_HIGH_VALUE_ON_EXCEPTION_STOP_RUN_END_XML.tree=(stmtXMLGENERATEdelimitedScope (stmtXMLGENERATEconditional (stmtXMLGENERATEimperative XML GENERATE (identifier XML-1) FROM (identifier SOURCE-0) COUNT (identifier C) ENCODING (identifier CDPG) XML-DECLARATION ATTRIBUTES NAMESPACE (identifier NS-NAME) NAMESPACE-PREFIX (literal (alphanumericLiteral 'PREFIX')) NAME (identifier ID-1) (literal (alphanumericLiteral 'ID1')) (identifier ID-2) (literal (alphanumericLiteral 'ID-2')) TYPE (identifier VAL-1) ATTRIBUTE (identifier VAL-2) ELEMENT SUPPRESS (identifier X-1) (xmlGenerateWhenPhrase WHEN ZEROES) (identifier X-2) (xmlGenerateWhenPhrase WHEN HIGH-VALUE)) (exceptionPhrases (onExceptionPhrase ON EXCEPTION (imperativeStatement (stmtSTOPRUN STOP RUN))))) END-XML)
