# BEGIN COPYRIGHT NOTICE
# 
# This file is part of program "cobolg"
# Copyright 2016  Rodrigo Lemos
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# END COPYRIGHT NOTICE

ADD_10_TO_X_Y_ROUNDED.source=ADD 10 TO X Y ROUNDED
ADD_10_TO_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) sizeErrorPhrases)

ADD_10_20_TO_X_Y_ROUNDED.source=ADD 10 20 TO X Y ROUNDED
ADD_10_20_TO_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) sizeErrorPhrases)

ADD_10_Z_TO_X_Y_ROUNDED.source=ADD 10 Z TO X Y ROUNDED
ADD_10_Z_TO_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) sizeErrorPhrases)

ADD_Z_TO_X_Y_ROUNDED.source=ADD Z TO X Y ROUNDED
ADD_Z_TO_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) sizeErrorPhrases)

ADD_Z_W_TO_X_Y_ROUNDED.source=ADD Z W TO X Y ROUNDED
ADD_Z_W_TO_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) sizeErrorPhrases)

ADD_Z_10_TO_X_Y_ROUNDED.source=ADD Z 10 TO X Y ROUNDED
ADD_Z_10_TO_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) sizeErrorPhrases)


ADD_10_TO_30_GIVING_X_Y_ROUNDED.source=ADD 10 TO 30 GIVING X Y ROUNDED
ADD_10_TO_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_20_TO_30_GIVING_X_Y_ROUNDED.source=ADD 10 20 TO 30 GIVING X Y ROUNDED
ADD_10_20_TO_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_Z_TO_30_GIVING_X_Y_ROUNDED.source=ADD 10 Z TO 30 GIVING X Y ROUNDED
ADD_10_Z_TO_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_TO_30_GIVING_X_Y_ROUNDED.source=ADD Z TO 30 GIVING X Y ROUNDED
ADD_Z_TO_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_W_TO_30_GIVING_X_Y_ROUNDED.source=ADD Z W TO 30 GIVING X Y ROUNDED
ADD_Z_W_TO_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_10_TO_30_GIVING_X_Y_ROUNDED.source=ADD Z 10 TO 30 GIVING X Y ROUNDED
ADD_Z_10_TO_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)


ADD_10_TO_K_GIVING_X_Y_ROUNDED.source=ADD 10 TO K GIVING X Y ROUNDED
ADD_10_TO_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_20_TO_K_GIVING_X_Y_ROUNDED.source=ADD 10 20 TO K GIVING X Y ROUNDED
ADD_10_20_TO_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_Z_TO_K_GIVING_X_Y_ROUNDED.source=ADD 10 Z TO K GIVING X Y ROUNDED
ADD_10_Z_TO_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_TO_K_GIVING_X_Y_ROUNDED.source=ADD Z TO K GIVING X Y ROUNDED
ADD_Z_TO_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_W_TO_K_GIVING_X_Y_ROUNDED.source=ADD Z W TO K GIVING X Y ROUNDED
ADD_Z_W_TO_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_10_TO_K_GIVING_X_Y_ROUNDED.source=ADD Z 10 TO K GIVING X Y ROUNDED
ADD_Z_10_TO_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)


ADD_10_30_GIVING_X_Y_ROUNDED.source=ADD 10 30 GIVING X Y ROUNDED
ADD_10_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_20_30_GIVING_X_Y_ROUNDED.source=ADD 10 20 30 GIVING X Y ROUNDED
ADD_10_20_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_Z_30_GIVING_X_Y_ROUNDED.source=ADD 10 Z 30 GIVING X Y ROUNDED
ADD_10_Z_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_30_GIVING_X_Y_ROUNDED.source=ADD Z 30 GIVING X Y ROUNDED
ADD_Z_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_W_30_GIVING_X_Y_ROUNDED.source=ADD Z W 30 GIVING X Y ROUNDED
ADD_Z_W_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_10_30_GIVING_X_Y_ROUNDED.source=ADD Z 10 30 GIVING X Y ROUNDED
ADD_Z_10_30_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)


ADD_10_K_GIVING_X_Y_ROUNDED.source=ADD 10 K GIVING X Y ROUNDED
ADD_10_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_20_K_GIVING_X_Y_ROUNDED.source=ADD 10 20 K GIVING X Y ROUNDED
ADD_10_20_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_10_Z_K_GIVING_X_Y_ROUNDED.source=ADD 10 Z K GIVING X Y ROUNDED
ADD_10_Z_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_K_GIVING_X_Y_ROUNDED.source=ADD Z K GIVING X Y ROUNDED
ADD_Z_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_W_K_GIVING_X_Y_ROUNDED.source=ADD Z W K GIVING X Y ROUNDED
ADD_Z_W_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)

ADD_Z_10_K_GIVING_X_Y_ROUNDED.source=ADD Z 10 K GIVING X Y ROUNDED
ADD_Z_10_K_GIVING_X_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) sizeErrorPhrases)


ADD_CORR_X_TO_Y_ROUNDED.source=ADD CORR X TO Y ROUNDED
ADD_CORR_X_TO_Y_ROUNDED.tree=(stmtADDconditional (stmtADDimperative ADD (correspondingPhrase CORR) (identifier X) TO (roundedPhrase (identifier Y) ROUNDED)) sizeErrorPhrases)



ADD_10_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 TO X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_20_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 20 TO X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_20_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_Z_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 Z TO X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_Z_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z TO X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_W_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z W TO X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_W_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_10_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z 10 TO X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_10_TO_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) TO (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED)) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))


ADD_10_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 TO 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_20_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 20 TO 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_20_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_Z_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 Z TO 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_Z_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z TO 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_W_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z W TO 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_W_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_10_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z 10 TO 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_10_TO_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) TO (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))


ADD_10_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 TO K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_20_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 20 TO K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_20_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_Z_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 Z TO K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_Z_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z TO K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_W_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z W TO K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_W_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_10_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z 10 TO K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_10_TO_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) TO (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))


ADD_10_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_20_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 20 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_20_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_Z_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 Z 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_Z_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_W_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z W 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_W_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_10_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z 10 30 GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_10_30_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) (literal (numericLiteral 30)) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))


ADD_10_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_20_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 20 K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_20_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (literal (numericLiteral 20)) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_10_Z_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD 10 Z K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_10_Z_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (literal (numericLiteral 10)) (identifier Z) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_W_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z W K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_W_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (identifier W) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

ADD_Z_10_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD Z 10 K GIVING X Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_Z_10_K_GIVING_X_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (identifier Z) (literal (numericLiteral 10)) (identifier K) (givingPhrase GIVING (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED))) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))


ADD_CORR_X_TO_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.source=ADD CORR X TO Y ROUNDED SIZE ERROR STOP RUN NOT SIZE ERROR STOP RUN
ADD_CORR_X_TO_Y_ROUNDED_SIZE_ERROR_STOP_RUN_NOT_SIZE_ERROR_STOP_RUN.tree=(stmtADDconditional (stmtADDimperative ADD (correspondingPhrase CORR) (identifier X) TO (roundedPhrase (identifier Y) ROUNDED)) (sizeErrorPhrases (onSizeErrorPhrase SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))) (notOnSizeErrorPhrase NOT SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

