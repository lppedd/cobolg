# BEGIN COPYRIGHT NOTICE
# 
# This file is part of program "cobolg"
# Copyright 2016  Rodrigo Lemos
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# END COPYRIGHT NOTICE

COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W.source=COMPUTE X ROUNDED Y EQUAL Z ** W
COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W.tree=(stmtCOMPUTE (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X) ROUNDED) (roundedPhrase (identifier Y)) EQUAL (arithmeticExpression (arithmeticExpression (identifier Z)) ** (arithmeticExpression (identifier W)))))

COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W.source=COMPUTE X Y ROUNDED = Z * W
COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W.tree=(stmtCOMPUTE (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED) = (arithmeticExpression (arithmeticExpression (identifier Z)) * (arithmeticExpression (identifier W)))))


COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W_ON_SIZE_ERROR_STOP_RUN.source=COMPUTE X ROUNDED Y EQUAL Z ** W ON SIZE ERROR STOP RUN
COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtCOMPUTE (stmtCOMPUTEconditional (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X) ROUNDED) (roundedPhrase (identifier Y)) EQUAL (arithmeticExpression (arithmeticExpression (identifier Z)) ** (arithmeticExpression (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))))))

COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W_ON_SIZE_ERROR_STOP_RUN.source=COMPUTE X Y ROUNDED = Z * W ON SIZE ERROR STOP RUN
COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtCOMPUTE (stmtCOMPUTEconditional (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED) = (arithmeticExpression (arithmeticExpression (identifier Z)) * (arithmeticExpression (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN))))))


COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W_END_COMPUTE.source=COMPUTE X ROUNDED Y EQUAL Z ** W END-COMPUTE
COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W_END_COMPUTE.tree=(stmtCOMPUTE (stmtCOMPUTEdelimitedScope (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X) ROUNDED) (roundedPhrase (identifier Y)) EQUAL (arithmeticExpression (arithmeticExpression (identifier Z)) ** (arithmeticExpression (identifier W)))) sizeErrorPhrases END-COMPUTE))

COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W_END_COMPUTE.source=COMPUTE X Y ROUNDED = Z * W END-COMPUTE
COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W_END_COMPUTE.tree=(stmtCOMPUTE (stmtCOMPUTEdelimitedScope (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED) = (arithmeticExpression (arithmeticExpression (identifier Z)) * (arithmeticExpression (identifier W)))) sizeErrorPhrases END-COMPUTE))


COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W_ON_SIZE_ERROR_STOP_RUN_END_COMPUTE.source=COMPUTE X ROUNDED Y EQUAL Z ** W ON SIZE ERROR STOP RUN END-COMPUTE
COMPUTE_X_ROUNDED_Y_EQUAL_Z_OP_STARSTAR_W_ON_SIZE_ERROR_STOP_RUN_END_COMPUTE.tree=(stmtCOMPUTE (stmtCOMPUTEdelimitedScope (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X) ROUNDED) (roundedPhrase (identifier Y)) EQUAL (arithmeticExpression (arithmeticExpression (identifier Z)) ** (arithmeticExpression (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))) END-COMPUTE))

COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W_ON_SIZE_ERROR_STOP_RUN_END_COMPUTE.source=COMPUTE X Y ROUNDED = Z * W ON SIZE ERROR STOP RUN END-COMPUTE
COMPUTE_X_Y_ROUNDED_OP_EQUAL_Z_OP_STAR_W_ON_SIZE_ERROR_STOP_RUN_END_COMPUTE.tree=(stmtCOMPUTE (stmtCOMPUTEdelimitedScope (stmtCOMPUTEimperative COMPUTE (roundedPhrase (identifier X)) (roundedPhrase (identifier Y) ROUNDED) = (arithmeticExpression (arithmeticExpression (identifier Z)) * (arithmeticExpression (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))) END-COMPUTE))
