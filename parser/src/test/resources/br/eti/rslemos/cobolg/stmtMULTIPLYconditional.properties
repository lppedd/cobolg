# BEGIN COPYRIGHT NOTICE
# 
# This file is part of program "cobolg"
# Copyright 2016  Rodrigo Lemos
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# END COPYRIGHT NOTICE

MULTIPLY_X_BY_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.source=MULTIPLY X BY Y ROUNDED W ON SIZE ERROR STOP RUN
MULTIPLY_X_BY_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtMULTIPLYconditional (stmtMULTIPLYimperative MULTIPLY (identifier X) BY (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

MULTIPLY_20_BY_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.source=MULTIPLY 20 BY Y ROUNDED W ON SIZE ERROR STOP RUN
MULTIPLY_20_BY_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtMULTIPLYconditional (stmtMULTIPLYimperative MULTIPLY (literal (numericLiteral 20)) BY (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))


MULTIPLY_X_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.source=MULTIPLY X BY Z GIVING Y ROUNDED W ON SIZE ERROR STOP RUN
MULTIPLY_X_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtMULTIPLYconditional (stmtMULTIPLYimperative MULTIPLY (identifier X) BY (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

MULTIPLY_X_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.source=MULTIPLY X BY 10 GIVING Y ROUNDED W ON SIZE ERROR STOP RUN
MULTIPLY_X_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtMULTIPLYconditional (stmtMULTIPLYimperative MULTIPLY (identifier X) BY (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

MULTIPLY_20_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.source=MULTIPLY 20 BY Z GIVING Y ROUNDED W ON SIZE ERROR STOP RUN
MULTIPLY_20_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtMULTIPLYconditional (stmtMULTIPLYimperative MULTIPLY (literal (numericLiteral 20)) BY (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))

MULTIPLY_20_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.source=MULTIPLY 20 BY 10 GIVING Y ROUNDED W ON SIZE ERROR STOP RUN
MULTIPLY_20_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN.tree=(stmtMULTIPLYconditional (stmtMULTIPLYimperative MULTIPLY (literal (numericLiteral 20)) BY (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (stmtSTOPRUN STOP RUN)))))
