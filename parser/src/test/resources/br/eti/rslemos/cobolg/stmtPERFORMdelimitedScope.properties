# BEGIN COPYRIGHT NOTICE
# 
# This file is part of program "cobolg"
# Copyright 2016  Rodrigo Lemos
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# END COPYRIGHT NOTICE

PERFORM_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM STOP RUN STOP RUN END-PERFORM
PERFORM_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_N_TIMES_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM N TIMES STOP RUN STOP RUN END-PERFORM
PERFORM_N_TIMES_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performTimes (identifier N) TIMES) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_10_TIMES_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM 10 TIMES STOP RUN STOP RUN END-PERFORM
PERFORM_10_TIMES_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performTimes 10 TIMES) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performUntil UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_WITH_TEST_BEFORE_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM WITH TEST BEFORE UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_WITH_TEST_BEFORE_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performUntil WITH TEST BEFORE UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_WITH_TEST_AFTER_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM WITH TEST AFTER UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_WITH_TEST_AFTER_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performUntil WITH TEST AFTER UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_WITH_TEST_BEFORE_VARYING_N_FROM_N_LOW_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM WITH TEST BEFORE VARYING N FROM N-LOW BY N-STEP UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_WITH_TEST_BEFORE_VARYING_N_FROM_N_LOW_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying WITH TEST BEFORE VARYING (identifier N) FROM (identifier N-LOW) BY (identifier N-STEP) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_WITH_TEST_AFTER_VARYING_N_FROM_N_LOW_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM WITH TEST AFTER VARYING N FROM N-LOW BY -2 UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_WITH_TEST_AFTER_VARYING_N_FROM_N_LOW_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying WITH TEST AFTER VARYING (identifier N) FROM (identifier N-LOW) BY (literal (numericLiteral -2)) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_VARYING_N_FROM_0_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM VARYING N FROM 0 BY N-STEP UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_VARYING_N_FROM_0_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying VARYING (identifier N) FROM (literal (numericLiteral 0)) BY (identifier N-STEP) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_VARYING_N_FROM_0_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM VARYING N FROM 0 BY -2 UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_VARYING_N_FROM_0_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying VARYING (identifier N) FROM (literal (numericLiteral 0)) BY (literal (numericLiteral -2)) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_TEST_AFTER_VARYING_N_FROM_N_LOW_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM TEST AFTER VARYING N FROM N-LOW BY N-STEP UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_TEST_AFTER_VARYING_N_FROM_N_LOW_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying TEST AFTER VARYING (identifier N) FROM (identifier N-LOW) BY (identifier N-STEP) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_TEST_BEFORE_VARYING_N_FROM_N_LOW_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM TEST BEFORE VARYING N FROM N-LOW BY -2 UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_TEST_BEFORE_VARYING_N_FROM_N_LOW_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying TEST BEFORE VARYING (identifier N) FROM (identifier N-LOW) BY (literal (numericLiteral -2)) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_TEST_BEFORE_VARYING_N_FROM_0_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM TEST BEFORE VARYING N FROM 0 BY N-STEP UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_TEST_BEFORE_VARYING_N_FROM_0_BY_N_STEP_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying TEST BEFORE VARYING (identifier N) FROM (literal (numericLiteral 0)) BY (identifier N-STEP) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

PERFORM_TEST_AFTER_VARYING_N_FROM_0_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.source=PERFORM TEST AFTER VARYING N FROM 0 BY -2 UNTIL N < 0 STOP RUN STOP RUN END-PERFORM
PERFORM_TEST_AFTER_VARYING_N_FROM_0_BY__2_UNTIL_N_OP_LESS_0_STOP_RUN_STOP_RUN_END_PERFORM.tree=(stmtPERFORMdelimitedScope PERFORM (performVarying TEST AFTER VARYING (identifier N) FROM (literal (numericLiteral 0)) BY (literal (numericLiteral -2)) UNTIL (conditionalExpression (relationCondition (operand (identifier N)) (relation <) (operand (literal (numericLiteral 0)))))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN))) END-PERFORM)

