# BEGIN COPYRIGHT NOTICE
# 
# This file is part of program "cobolg"
# Copyright 2016  Rodrigo Lemos
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# END COPYRIGHT NOTICE

EVALUATE_ID_1_WHEN_NOT_ID_4_THRU_ID_4_OP_STAR_40_DISPLAY_QUOTED_BRANCH_1_WHEN_ID_4_OP_GREATER_QUOTED_A_DISPLAY_QUOTED_BRANCH_2_WHEN_TRUE_DISPLAY_QUOTED_BRANCH_3_END_EVALUATE.source=EVALUATE ID-1 WHEN NOT ID-4 THRU ID-4 * 40 DISPLAY 'BRANCH-1' WHEN ID-4 > 'A' DISPLAY 'BRANCH-2' WHEN TRUE DISPLAY 'BRANCH-3' END-EVALUATE
EVALUATE_ID_1_WHEN_NOT_ID_4_THRU_ID_4_OP_STAR_40_DISPLAY_QUOTED_BRANCH_1_WHEN_ID_4_OP_GREATER_QUOTED_A_DISPLAY_QUOTED_BRANCH_2_WHEN_TRUE_DISPLAY_QUOTED_BRANCH_3_END_EVALUATE.tree=(stmtEVALUATEdelimitedScope (stmtEVALUATEconditional EVALUATE (identifier ID-1) WHEN (evaluateWhenPhrase NOT (identifier ID-4) THRU (arithmeticExpression (arithmeticExpression (identifier ID-4)) * (arithmeticExpression (literal (numericLiteral 40))))) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-1')))) WHEN (evaluateWhenPhrase (conditionalExpression (relationCondition (operand (identifier ID-4)) (relation >) (operand (literal (alphanumericLiteral 'A')))))) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-2')))) WHEN (evaluateWhenPhrase TRUE) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-3'))))) END-EVALUATE)

EVALUATE_QUOTED_X_WHEN_QUOTED_A_DISPLAY_QUOTED_BRANCH_1_WHEN_NOT_ID_4_DISPLAY_QUOTED_BRANCH_2_WHEN_ID_4_THROUGH_ID_5_DISPLAY_QUOTED_BRANCH_3_WHEN_OTHER_DISPLAY_QUOTED_OTHER_END_EVALUATE.source=EVALUATE 'X' WHEN 'A' DISPLAY 'BRANCH-1' WHEN NOT ID-4 DISPLAY 'BRANCH-2' WHEN ID-4 THROUGH ID-5 DISPLAY 'BRANCH-3' WHEN OTHER DISPLAY 'OTHER' END-EVALUATE
EVALUATE_QUOTED_X_WHEN_QUOTED_A_DISPLAY_QUOTED_BRANCH_1_WHEN_NOT_ID_4_DISPLAY_QUOTED_BRANCH_2_WHEN_ID_4_THROUGH_ID_5_DISPLAY_QUOTED_BRANCH_3_WHEN_OTHER_DISPLAY_QUOTED_OTHER_END_EVALUATE.tree=(stmtEVALUATEdelimitedScope (stmtEVALUATEconditional EVALUATE (literal (alphanumericLiteral 'X')) WHEN (evaluateWhenPhrase (literal (alphanumericLiteral 'A'))) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-1')))) WHEN (evaluateWhenPhrase NOT (identifier ID-4)) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-2')))) WHEN (evaluateWhenPhrase (identifier ID-4) THROUGH (identifier ID-5)) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-3')))) WHEN OTHER (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'OTHER'))))) END-EVALUATE)


EVALUATE_ID_1_OP_PLUS_10_ALSO_TRUE_WHEN_ID_4_OP_STAR_40_ALSO_FALSE_DISPLAY_QUOTED_BRANCH_1_WHEN_40_THROUGH_50_DISPLAY_QUOTED_BRANCH_2_END_EVALUATE.source=EVALUATE ID-1 + 10 ALSO TRUE WHEN ID-4 * 40 ALSO FALSE DISPLAY 'BRANCH-1' WHEN 40 THROUGH 50 DISPLAY 'BRANCH-2' END-EVALUATE
EVALUATE_ID_1_OP_PLUS_10_ALSO_TRUE_WHEN_ID_4_OP_STAR_40_ALSO_FALSE_DISPLAY_QUOTED_BRANCH_1_WHEN_40_THROUGH_50_DISPLAY_QUOTED_BRANCH_2_END_EVALUATE.tree=(stmtEVALUATEdelimitedScope (stmtEVALUATEconditional EVALUATE (arithmeticExpression (arithmeticExpression (identifier ID-1)) + (arithmeticExpression (literal (numericLiteral 10)))) ALSO TRUE WHEN (evaluateWhenPhrase (arithmeticExpression (arithmeticExpression (identifier ID-4)) * (arithmeticExpression (literal (numericLiteral 40))))) ALSO (evaluateWhenPhrase FALSE) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-1')))) WHEN (evaluateWhenPhrase (literal (numericLiteral 40)) THROUGH (literal (numericLiteral 50))) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-2'))))) END-EVALUATE)

EVALUATE_FALSE_ALSO_ID_2_WHEN_ID_4_ALSO_ID_5___10_THROUGH_ID_5_OP_PLUS_10_DISPLAY_QUOTED_BRANCH_1_WHEN_NOT_ID_6___60_THRU_ID_6_OP_PLUS_60_DISPLAY_QUOTED_BRANCH_2_WHEN_OTHER_DISPLAY_QUOTED_OTHER_END_EVALUATE.source=EVALUATE FALSE ALSO ID-2 WHEN ID-4 ALSO ID-5 - 10 THROUGH ID-5 + 10 DISPLAY 'BRANCH-1' WHEN NOT ID-6 - 60 THRU ID-6 + 60 DISPLAY 'BRANCH-2' WHEN OTHER DISPLAY 'OTHER' END-EVALUATE
EVALUATE_FALSE_ALSO_ID_2_WHEN_ID_4_ALSO_ID_5___10_THROUGH_ID_5_OP_PLUS_10_DISPLAY_QUOTED_BRANCH_1_WHEN_NOT_ID_6___60_THRU_ID_6_OP_PLUS_60_DISPLAY_QUOTED_BRANCH_2_WHEN_OTHER_DISPLAY_QUOTED_OTHER_END_EVALUATE.tree=(stmtEVALUATEdelimitedScope (stmtEVALUATEconditional EVALUATE FALSE ALSO (identifier ID-2) WHEN (evaluateWhenPhrase (identifier ID-4)) ALSO (evaluateWhenPhrase (arithmeticExpression (arithmeticExpression (identifier ID-5)) - (arithmeticExpression (literal (numericLiteral 10)))) THROUGH (arithmeticExpression (arithmeticExpression (identifier ID-5)) + (arithmeticExpression (literal (numericLiteral 10))))) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-1')))) WHEN (evaluateWhenPhrase NOT (arithmeticExpression (arithmeticExpression (identifier ID-6)) - (arithmeticExpression (literal (numericLiteral 60)))) THRU (arithmeticExpression (arithmeticExpression (identifier ID-6)) + (arithmeticExpression (literal (numericLiteral 60))))) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-2')))) WHEN OTHER (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'OTHER'))))) END-EVALUATE)


EVALUATE_QUOTED_X_ALSO_ID_2___20_ALSO_ID_3_WHEN_QUOTED_A_THRU_QUOTED_Z_ALSO_NOT_10_THRU_20_ALSO_NOT_QUOTED_A_DISPLAY_QUOTED_BRANCH_1_END_EVALUATE.source=EVALUATE 'X' ALSO ID-2 - 20 ALSO ID-3 WHEN 'A' THRU 'Z' ALSO NOT 10 THRU 20 ALSO NOT 'A' DISPLAY 'BRANCH-1' END-EVALUATE
EVALUATE_QUOTED_X_ALSO_ID_2___20_ALSO_ID_3_WHEN_QUOTED_A_THRU_QUOTED_Z_ALSO_NOT_10_THRU_20_ALSO_NOT_QUOTED_A_DISPLAY_QUOTED_BRANCH_1_END_EVALUATE.tree=(stmtEVALUATEdelimitedScope (stmtEVALUATEconditional EVALUATE (literal (alphanumericLiteral 'X')) ALSO (arithmeticExpression (arithmeticExpression (identifier ID-2)) - (arithmeticExpression (literal (numericLiteral 20)))) ALSO (identifier ID-3) WHEN (evaluateWhenPhrase (literal (alphanumericLiteral 'A')) THRU (literal (alphanumericLiteral 'Z'))) ALSO (evaluateWhenPhrase NOT (literal (numericLiteral 10)) THRU (literal (numericLiteral 20))) ALSO (evaluateWhenPhrase NOT (literal (alphanumericLiteral 'A'))) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-1'))))) END-EVALUATE)

EVALUATE_FALSE_ALSO_ID_2_ALSO_30_WHEN_ANY_ALSO_ID_4_OP_STAR_40_THROUGH_80_ALSO_NOT_10_THRU_ID_5_DISPLAY_QUOTED_BRANCH_1_WHEN_OTHER_DISPLAY_QUOTED_OTHER_END_EVALUATE.source=EVALUATE FALSE ALSO ID-2 ALSO 30 WHEN ANY ALSO ID-4 * 40 THROUGH 80 ALSO NOT 10 THRU ID-5 DISPLAY 'BRANCH-1' WHEN OTHER DISPLAY 'OTHER' END-EVALUATE
EVALUATE_FALSE_ALSO_ID_2_ALSO_30_WHEN_ANY_ALSO_ID_4_OP_STAR_40_THROUGH_80_ALSO_NOT_10_THRU_ID_5_DISPLAY_QUOTED_BRANCH_1_WHEN_OTHER_DISPLAY_QUOTED_OTHER_END_EVALUATE.tree=(stmtEVALUATEdelimitedScope (stmtEVALUATEconditional EVALUATE FALSE ALSO (identifier ID-2) ALSO (literal (numericLiteral 30)) WHEN (evaluateWhenPhrase ANY) ALSO (evaluateWhenPhrase (arithmeticExpression (arithmeticExpression (identifier ID-4)) * (arithmeticExpression (literal (numericLiteral 40)))) THROUGH (literal (numericLiteral 80))) ALSO (evaluateWhenPhrase NOT (literal (numericLiteral 10)) THRU (identifier ID-5)) (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'BRANCH-1')))) WHEN OTHER (proceduralStatement (stmtDISPLAY DISPLAY (literal (alphanumericLiteral 'OTHER'))))) END-EVALUATE)

