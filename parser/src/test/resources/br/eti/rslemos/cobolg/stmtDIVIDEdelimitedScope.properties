# BEGIN COPYRIGHT NOTICE
# 
# This file is part of program "cobolg"
# Copyright 2016  Rodrigo Lemos
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# END COPYRIGHT NOTICE

DIVIDE_X_INTO_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE X INTO Y ROUNDED W END-DIVIDE
DIVIDE_X_INTO_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_INTO_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE 20 INTO Y ROUNDED W END-DIVIDE
DIVIDE_20_INTO_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W))) sizeErrorPhrases) END-DIVIDE)


DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE X INTO Z GIVING Y ROUNDED W END-DIVIDE
DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE X INTO 10 GIVING Y ROUNDED W END-DIVIDE
DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE 20 INTO Z GIVING Y ROUNDED W END-DIVIDE
DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE 20 INTO 10 GIVING Y ROUNDED W END-DIVIDE
DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE X BY Z GIVING Y ROUNDED W END-DIVIDE
DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_X_BY_10_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE X BY 10 GIVING Y ROUNDED W END-DIVIDE
DIVIDE_X_BY_10_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE 20 BY Z GIVING Y ROUNDED W END-DIVIDE
DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_BY_10_GIVING_Y_ROUNDED_W_END_DIVIDE.source=DIVIDE 20 BY 10 GIVING Y ROUNDED W END-DIVIDE
DIVIDE_20_BY_10_GIVING_Y_ROUNDED_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) sizeErrorPhrases) END-DIVIDE)


DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE X INTO Z GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)

DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE X INTO 10 GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE 20 INTO Z GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE 20 INTO 10 GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)

DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE X BY Z GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)

DIVIDE_X_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE X BY 10 GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_X_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE 20 BY Z GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)

DIVIDE_20_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.source=DIVIDE 20 BY 10 GIVING Y ROUNDED REMAINDER W END-DIVIDE
DIVIDE_20_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) sizeErrorPhrases) END-DIVIDE)


DIVIDE_X_INTO_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X INTO Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_INTO_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_INTO_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 INTO Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_INTO_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)


DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X INTO Z GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X INTO 10 GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 INTO Z GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 INTO 10 GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X BY Z GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_X_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X BY 10 GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 BY Z GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (identifier Z) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 BY 10 GIVING Y ROUNDED W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_BY_10_GIVING_Y_ROUNDED_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (literal (numericLiteral 10)) (givingPhrase GIVING (roundedPhrase (identifier Y) ROUNDED) (roundedPhrase (identifier W)))) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)


DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X INTO Z GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X INTO 10 GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) INTO (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 INTO Z GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_INTO_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 INTO 10 GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_INTO_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) INTO (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X BY Z GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_X_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE X BY 10 GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_X_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (identifier X) BY (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 BY Z GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_BY_Z_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (identifier Z) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)

DIVIDE_20_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.source=DIVIDE 20 BY 10 GIVING Y ROUNDED REMAINDER W ON SIZE ERROR STOP RUN END-DIVIDE
DIVIDE_20_BY_10_GIVING_Y_ROUNDED_REMAINDER_W_ON_SIZE_ERROR_STOP_RUN_END_DIVIDE.tree=(stmtDIVIDEdelimitedScope (stmtDIVIDEconditional (stmtDIVIDEimperative DIVIDE (literal (numericLiteral 20)) BY (literal (numericLiteral 10)) GIVING (roundedPhrase (identifier Y) ROUNDED) REMAINDER (identifier W)) (sizeErrorPhrases (onSizeErrorPhrase ON SIZE ERROR (proceduralStatement (imperativeStatement (stmtSTOPRUN STOP RUN)))))) END-DIVIDE)
